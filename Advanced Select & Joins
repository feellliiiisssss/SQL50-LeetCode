#1. The Number of Employees Which Report to Each Employee (Easy)
--For this problem, we will consider a manager an employee who has at least 1 other employee reporting to them.
--Write a solution to report the ids and the names of all managers, the number of employees who report directly to them, and the average age of the reports rounded to the nearest integer.
--Return the result table ordered by employee_id.
SELECT a.employee_id, a.name, COUNT(b.reports_to) reports_count, ROUND(AVG(b.age),0) average_age
FROM employees a JOIN employees b ON a.employee_id = b.reports_to
GROUP BY a.employee_id, a.name
ORDER BY a.employee_id

#2. Primary Department for Each Employee (Easy)
--Employees can belong to multiple departments. When the employee joins other departments, they need to decide which department is their primary department. Note that when an employee belongs to only one department, their primary column is 'N'.
--Write a solution to report all the employees with their primary department. For employees who belong to one department, report their only department.
--Return the result table in any order.
WITH CTE AS (SELECT employee_id, department_id, 
COUNT(*) OVER(PARTITION BY employee_id) FROM employee
GROUP BY employee_id
HAVING COUNT(*) = 1)
SELECT b.employee_id, b.department_id
FROM employee b WHERE b.primary_flag = 'Y'
UNION
SELECT a.employee_id, a.department_id FROM a

#3. Triangle Judgement (Easy)
--Report for every three line segments whether they can form a triangle.
--Return the result table in any order.
SELECT x,y,z,
CASE
WHEN x+y>z AND x+z>y AND y+z>x THEN 'Yes' ELSE 'No' END AS triangle --triangle inequality
FROM triangle

#4. Consecutive Numbers (Medium)
--Find all numbers that appear at least three times consecutively.
--Return the result table in any order.
--NOT COMPLETED YET :)

#5. Product Price at a Given Date (Medium)
--Write a solution to find the prices of all products on 2019-08-16. Assume the price of all products before any change is 10.
--Return the result table in any order.
--NOT COMPLETED YET :)

#6. Last Person to Fit in the Bus (Medium)
--There is a queue of people waiting to board a bus. However, the bus has a weight limit of 1000 kilograms, so there may be some people who cannot board.
--Write a solution to find the person_name of the last person that can fit on the bus without exceeding the weight limit. The test cases are generated such that the first person does not exceed the weight limit.
--Note that only one person can board the bus at any given turn.
SELECT person_name FROM(SELECT turn, person_id, person_name, weight, SUM(weight) OVER(ORDER BY turn) total_weight
FROM queue) SUBQUERY
WHERE total_weight <= 1000
ORDER BY turn DESC
LIMIT 1

#7. Count Salary Categories (Medium)
--Write a solution to calculate the number of bank accounts for each salary category. The salary categories are:
--"Low Salary": All the salaries strictly less than $20000.
--"Average Salary": All the salaries in the inclusive range [$20000, $50000]
--"High Salary": All the salaries strictly greater than $50000
--The result table must contain all three categories. If there are no accounts in a category, return 0.
--Return the result table in any order.
WITH CTE_SalaryCat as(
SELECT
CASE WHEN income < 20000 THEN 'Low Salary'
WHEN income BETWEEN 20000 AND 50000 THEN 'Average Salary'
WHEN income > 50000 THEN 'High Salary'
ELSE 0 END AS category, COUNT(account_id) accounts_count
FROM accounts 
GROUP BY CASE WHEN income < 20000 THEN 'Low Salary'
WHEN income BETWEEN 20000 AND 50000 THEN 'Average Salary'
WHEN income > 50000 THEN 'High Salary'
ELSE 0 END
)
SELECT b.category, COALESCE(accounts_count,0) accounts_count FROM CTE_SalaryCat s
RIGHT JOIN
(
    SELECT 'Low Salary' AS category
    UNION ALL
    SELECT 'Average Salary' AS category
    UNION ALL
    SELECT 'High Salary' AS category
) b ON a.category = b.category
ORDER BY accounts_count
