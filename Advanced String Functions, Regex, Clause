#1. Fix Names in a Table (Easy)
-- Write a solution to fix the names so that only the first character is uppercase and the rest are lowercase.
-- Return the result table ordered by user_id.
WITH CTE_Name AS (
SELECT user_id, UPPER((name, 1)) fname, LOWER(RIGHT(name, LENGTH(name)-1)) lname FROM users
ORDER BY user_id
)
SELECT user_id, CONCAT(fname, lname) name FROM CTE_Name

#2. Patients With a Condition (Easy)
-- Write a solution to find the patient_id, patient_name, and conditions of the patients who have Type I Diabetes. Type I Diabetes always starts with DIAB1 prefix.
-- Return the result table in any order.
SELECT*FROM patients WHERE conditions REGEXP '^DIAB1| DIAB1'

#3. Delete Duplicate Emails (Easy)
-- Write a solution to delete all duplicate emails, keeping only one unique email with the smallest id.
-- For SQL users, please note that you are supposed to write a DELETE statement and not a SELECT one.
-- For Pandas users, please note that you are supposed to modify Person in place.
-- After running your script, the answer shown is the Person table. The driver will first compile and run your piece of code and then show the Person table. The final order of the Person table does not matter.
DELETE FROM person p
WHERE NOT EXISTS
(
    SELECT 1 FROM 
    (
        SELECT MIN(id) min, email FROM person GROUP BY email
    ) p2
    WHERE p.id = p2.min AND p.email = p2.email
)

#4. Second Highest Salary (Medium)
-- Write a solution to find the second highest distinct salary from the Employee table. If there is no second highest salary, return null (return None in Pandas).
SELECT CASE WHEN COUNT(DISTINCT salary) <> 1 THEN (
SELECT SecondHighestSalary FROM (
SELECT salary as SecondHighestSalary FROM(
SELECT salary FROM employee
GROUP BY salary
ORDER BY salary DESC
LIMIT 2
) SUBQUERY
ORDER BY salary ASC
LIMIT 1
) SUBQUERY2
)
ELSE NULL END AS SecondHighestSalary FROM employee

#5. Group Sold Products By The Date (Easy)
-- Write a solution to find for each date the number of different products sold and their names.
-- The sold products names for each date should be sorted lexicographically.
-- Return the result table ordered by sell_date.
SELECT DATE(sell_date) sell_date, COUNT(DISTINCT product) num_sold, GROUP_CONCAT(DISTINCT product ORDER BY product SEPARATOR ',') products
FROM activities GROUP BY sell_date

#6. List the Products Ordered in a Period (Easy)
-- Write a solution to get the names of products that have at least 100 units ordered in February 2020 and their amount.
-- Return the result table in any order.
SELECT p.product_name, SUM(o.unit) unit FROM products p JOIN orders o ON p.product_id = o.product_id
WHERE MONTH(o.order_date) = 2 AND YEAR(o.order_date) = 2020
GROUP BY p.product_name
HAVING SUM(o.unit) >= 100

#7. Find Users With Valid E-Mails (Easy)
-- Write a solution to find the users who have valid emails.
-- A valid e-mail has a prefix name and a domain where:
-- The prefix name is a string that may contain letters (upper or lower case), digits, underscore '_', period '.', and/or dash '-'. The prefix name must start with a letter.
-- The domain is '@leetcode.com'.
-- Return the result table in any order.
SELECT user_id, name, mail FROM users
WHERE mail REGEXP '^[a-zA-Z]{1}+[0-9a-zA-Z._-]*+@leetcode\\.com$'
