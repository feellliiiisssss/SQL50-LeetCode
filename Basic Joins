#1. Replace Employee ID With The Unique Identify (Easy)
--Write a solution to show the unique ID of each user, If a user does not have a unique ID replace just show null.
--Return the result table in any order.
SELECT u.unique_id, e.name FROM employees e LEFT JOIN employeeuni u ON e.id = u.id

#2. Product Sales Analysis I (Easy)
--Write a solution to report the product_name, year, and price for each sale_id in the Sales table.
--Return the resulting table in any order.
SELECT p.product_name, s.year, s.price FROM sales s 
LEFT JOIN product p ON s.product_id = p.product_id

#3. Customer Who Visited but Did Not Make Any Transactions (Easy)
--Write a solution to find the IDs of the users who visited without making any transactions and the number of times they made these types of visits.
--Return the result table sorted in any order.
SELECT customer_id, COUNT(customer_id) count_no_trans FROM(
SELECT v.customer_id, t.transaction_id FROM visits v LEFT JOIN transactions t
ON v.visit_id = t.visit_id
) SUBQUERY
WHERE transaction_id IS NULL
GROUP BY customer_id

#4. Rising Temperature (Easy)
--Write a solution to find all dates' id with higher temperatures compared to its previous dates (yesterday).
--Return the result table in any order.
SELECT a.id FROM weather a, weather b WHERE DATEDIFF(a.recorddate, b.recorddate) = 1 AND a.temperature>b.temperature

#5. Average Time of Process per Machine (Easy)
--There is a factory website that has several machines each running the same number of processes. Write a solution to find the average time each machine takes to complete a process.
--The time to complete a process is the 'end' timestamp minus the 'start' timestamp. The average time is calculated by the total time to complete every process on the machine divided by the number of processes that were run.
--The resulting table should have the machine_id along with the average time as processing_time, which should be rounded to 3 decimal places.
--Return the result table in any order.
SELECT a.machine_id, COALESCE(ROUND(SUM(b.timestamp-a.timestamp)/COUNT(a.process_id),3),0) processing_time
FROM activity a
JOIN activity b ON a.machine_id = b.machine_id AND a.process_id = b.process_id
WHERE a.activity_type = 'start' AND b.activity_type = 'end'
GROUP BY a.machine_id

#6. Employee Bonus (Easy)
--Write a solution to report the name and bonus amount of each employee with a bonus less than 1000.
--Return the result table in any order.
SELECT e.name, b.bonus FROM employee e LEFT JOIN bonus b
ON e.empid = b.empid WHERE COALESCE(b.bonus,'') < 1000

#7. Students and Examinations (Easy)
--Write a solution to find the number of times each student attended each exam.
--Return the result table ordered by student_id and subject_name.
SELECT s.student_id, s.student_name, j.subject_name, COUNT(e.subject_name) attended_exams FROM
students s
CROSS JOIN subjects j
LEFT JOIN examinations e ON s.student_id = e.student_id AND j.subject_name = e.subject_name
GROUP BY s.student_id, j.subject_name
ORDER BY s.student_id, j.subject_name

#8. Managers with ad Least 5 Direct Reports (Medium)
--Write a solution to find managers with at least five direct reports.
--Return the result table in any order
SELECT name FROM employee WHERE id IN (SELECT managerid FROM employee GROUP BY managerid HAVING COUNT(*) >= 5)

#9. Confirmation Rate (Medium)
--The confirmation rate of a user is the number of 'confirmed' messages divided by the total number of requested confirmation messages. The confirmation rate of a user that did not request any confirmation messages is 0. Round the confirmation rate to two decimal places.
--Write a solution to find the confirmation rate of each user.
--Return the result table in any order.
SELECT user_id, ROUND(COALESCE(sums/cnt,0),2) confirmation_rate FROM (
SELECT s.user_id, COALESCE(COUNT(c.action)) cnt, COALESCE(SUM(c.action='confirmed'),0) sums
FROM signups s LEFT JOJN confirmations c ON s.user_id = c.user_id
GROUP BY s.user_id) SUBQUERY
GROUP BY user_id
