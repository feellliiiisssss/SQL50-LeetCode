#1. Employees Whose Manager Left the Company (Easy)
-- Find the IDs of the employees whose salary is strictly less than $30000 and whose manager left the company. When a manager leaves the company, their information is deleted from the Employees table, but the reports still have their manager_id set to the manager that left.
-- Return the result table ordered by employee_id.
SELECT employee_id FROM employees
WHERE manager_id NOT IN (SELECT a.employee_id from employees)
AND salary < 30000
ORDER BY employee_id

#2. Exchange Seats (Medium)
-- Write a solution to swap the seat id of every two consecutive students. If the number of students is odd, the id of the last student is not swapped.
-- Return the result table ordered by id in ascending order.
-- NOT COMPLETED YET :)

#3. Movie rating (Medium)
-- Find the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name.
-- Find the movie name with the highest average rating in February 2020. In case of a tie, return the lexicographically smaller movie name.
-- NOT COMPLETED YET :)

#4. Restaurant Growth (Medium)
-- You are the restaurant owner and you want to analyze a possible expansion (there will be at least one customer every day).
-- Compute the moving average of how much the customer paid in a seven days window (i.e., current day + 6 days before). average_amount should be rounded to two decimal places.
-- Return the result table ordered by visited_on in ascending order.
-- NOT COMPLETED YET :)

#5. Friend Requests II: Who Has the Most Friends (Medium)
-- Write a solution to find the people who have the most friends and the most friends number.
-- The test cases are generated so that only one person has the most friends.
-- NOT COMPLETED YET :)

#6. Investments in 2016 (Medium)
-- Write a solution to report the sum of all total investment values in 2016 tiv_2016, for all policyholders who:
-- have the same tiv_2015 value as one or more other policyholders, and
-- are not located in the same city as any other policyholder (i.e., the (lat, lon) attribute pairs must be unique).
-- Round tiv_2016 to two decimal places.
-- NOT COMPLETED YET :)

#7. Department Top Three Salaries (Hard)
-- A company's executives are interested in seeing who earns the most money in each of the company's departments. A high earner in a department is an employee who has a salary in the top three unique salaries for that department.
-- Write a solution to find the employees who are high earners in each of the departments.
-- Return the result table in any order.
SELECT department, employee, salary FROM (
SELECT d.name department, e.name employee, e.salary, DENSE_RANK() OVER(PARTITION BY d.name ORDER BY salary DESC) depart FROM employee e 
LEFT JOIN
department d on e.departmentid = d.id
ORDER BY d.name, salary DESC) SUBQUERY WHERE depart IN (1,2,3)
